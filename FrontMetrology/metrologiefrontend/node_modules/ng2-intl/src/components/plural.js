var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { IntlService, FormatService } from '../services';
import { AbstractI18nComponent } from './abstractI18n';
var FormattedPluralComponent = /** @class */ (function (_super) {
    __extends(FormattedPluralComponent, _super);
    function FormattedPluralComponent(intlService, formatService) {
        return _super.call(this, intlService, formatService) || this;
    }
    FormattedPluralComponent.prototype.updateValue = function () {
        var props = Object.assign({}, {
            other: this.other,
            zero: this.zero,
            one: this.one,
            two: this.two,
            few: this.few,
            many: this.many
        }, this.options);
        var pluralCategory = this.formatService.formatPlural(this.value, props);
        this.result = props[pluralCategory] || this.other;
    };
    FormattedPluralComponent.prototype.ngOnChanges = function (changes) {
        if (changes['value'] || changes['options'] || changes['other'] || changes['plurals']) {
            this.updateValue();
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FormattedPluralComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "other", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "zero", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "one", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "two", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "few", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FormattedPluralComponent.prototype, "many", void 0);
    FormattedPluralComponent = __decorate([
        Component({
            selector: 'FormattedPlural',
            template: "{{result}}"
        }),
        __metadata("design:paramtypes", [IntlService, FormatService])
    ], FormattedPluralComponent);
    return FormattedPluralComponent;
}(AbstractI18nComponent));
export { FormattedPluralComponent };
//# sourceMappingURL=plural.js.map