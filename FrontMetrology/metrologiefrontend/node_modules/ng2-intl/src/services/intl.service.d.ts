import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { IntlLoader } from './intl.loader';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/merge';
import 'rxjs/add/operator/toArray';
export interface LangChangeEvent {
    lang: string;
    messages: any;
}
export declare abstract class MissingTranslationHandler {
    /**
     * A function that handles missing messages.
     * @param key the missing key
     * @returns {any} a value or an observable
     * If it returns a value, then this value is used.
     * If it return an observable, the value returned by this observable will be used (except if the method was "instant").
     * If it doesn't return then the key will be used as a value
     */
    abstract handle(key: string): any;
}
export declare class IntlService {
    currentLoader: IntlLoader;
    private missingTranslationHandler;
    /**
      * The lang currently used
      */
    currentLang: string;
    /**
     * An EventEmitter to listen to lang change events
     * onLangChange.subscribe((params: LangChangeEvent) => {
     *     // do something
     * });
     * @type {ng.EventEmitter<LangChangeEvent>}
     */
    onLangChange: EventEmitter<LangChangeEvent>;
    private pending;
    private messages;
    private defaultLang;
    private defaultFormat;
    private langs;
    constructor(currentLoader: IntlLoader, missingTranslationHandler: MissingTranslationHandler);
    /**
       * Sets the default language to use as a fallback
       * @param lang
       */
    setDefaultLang(lang: string): void;
    /**
       * Gets the default language used
       * @returns string
       */
    getDefaultLang(): string;
    start(): void;
    /**
     * Changes the lang currently used
     * @param lang
     * @returns {Observable<*>}
     */
    use(lang: string): Observable<any>;
    /**
     * Gets an object of messages for a given language with the current loader
     * @param lang
     * @returns {Observable<*>}
     */
    getTranslation(lang: string): Observable<any>;
    /**
      * Manually sets an object of translations for a given language
      * @param lang
      * @param translations
      * @param shouldMerge
      */
    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;
    /**
       * Returns an array of currently available langs
       * @returns {any}
       */
    getLangs(): Array<string>;
    /**
  * @param langs
  * Add available langs
  */
    addLangs(langs: Array<string>): void;
    /**
     * Update the list of available langs
     */
    private updateLangs();
    /**
       * Gets the message of a key
       * @param key
       * @returns {any} the translated key
       */
    getAsync(key: string): Observable<undefined | string | any>;
    /**
      * Gets the message of a key
      * @param key
      * @returns {any} the translated key
      */
    get(key: string): string;
    getConfig(): {
        locale: string;
        formats: any;
        defaultLocale: string;
    };
    /**
     * Changes the current lang
     * @param lang
     */
    private changeLang(lang);
}
