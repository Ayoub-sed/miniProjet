var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Pipe, ChangeDetectorRef } from '@angular/core';
import { IntlService, FormatService } from '../services';
import { AbstractI18nPipe } from './abstractI18n';
var FormattedMessagePipe = /** @class */ (function (_super) {
    __extends(FormattedMessagePipe, _super);
    function FormattedMessagePipe(intlService, _ref, formatService) {
        return _super.call(this, intlService, _ref, formatService) || this;
    }
    FormattedMessagePipe.prototype.isValidQuery = function (query) {
        return query && ((typeof query === 'string' && query.length > 0) || (typeof query === 'object' && query.id));
    };
    FormattedMessagePipe.prototype.updateValue = function (descriptor, interpolateParams) {
        var _this = this;
        if (interpolateParams === void 0) { interpolateParams = {}; }
        var values = interpolateParams.values ? interpolateParams.values : {};
        if (typeof descriptor === 'string') {
            descriptor = { id: descriptor };
            if (interpolateParams['defaultMessage']) {
                descriptor.defaultMessage = interpolateParams['defaultMessage'];
            }
        }
        this.formatService
            .formatMessageAsync(descriptor, values)
            .subscribe(function (msg) {
            _this.value = msg;
            _this.lastKey = descriptor;
            _this._ref.markForCheck();
        });
    };
    FormattedMessagePipe = __decorate([
        Pipe({
            name: 'formattedMessage',
            pure: false // required to update the value when the promise is resolved
        }),
        __metadata("design:paramtypes", [IntlService, ChangeDetectorRef, FormatService])
    ], FormattedMessagePipe);
    return FormattedMessagePipe;
}(AbstractI18nPipe));
export { FormattedMessagePipe };
//# sourceMappingURL=message.js.map