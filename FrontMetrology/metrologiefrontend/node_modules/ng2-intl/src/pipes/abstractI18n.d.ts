import { PipeTransform, EventEmitter, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { IntlService, LangChangeEvent, FormatService } from '../services';
import { MessageDescriptor } from '../interfaces';
export declare abstract class AbstractI18nPipe implements PipeTransform, OnDestroy {
    protected intlService: IntlService;
    protected _ref: ChangeDetectorRef;
    protected formatService: FormatService;
    value: string;
    lastKey: any;
    lastParams: any[];
    onLangChange: undefined | EventEmitter<LangChangeEvent>;
    constructor(intlService: IntlService, _ref: ChangeDetectorRef, formatService: FormatService);
    /**
     * @name equals
     *
     * @description
     * Determines if two objects or two values are equivalent.
     *
     * Two objects or values are considered equivalent if at least one of the following is true:
     *
     * * Both objects or values pass `===` comparison.
     * * Both objects or values are of the same type and all of their properties are equal by
     *   comparing them with `equals`.
     *
     * @param {*} o1 Object or value to compare.
     * @param {*} o2 Object or value to compare.
     * @returns {boolean} True if arguments are equal.
     */
    private equals(o1, o2);
    abstract updateValue(key: any, interpolateParams?: Object, options?: Object): void;
    abstract isValidQuery(query: any): boolean;
    transform(query: string | MessageDescriptor, ...args: any[]): any;
    /**
     * Clean any existing subscription to change events
     * @private
     */
    _dispose(): void;
    ngOnDestroy(): void;
}
