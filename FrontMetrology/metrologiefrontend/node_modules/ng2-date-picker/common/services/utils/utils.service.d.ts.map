{"version":3,"file":"utils.service.d.ts","sources":["utils.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ECalendarValue } from '../../types/calendar-value-enum';\r\nimport { SingleCalendarValue } from '../../types/single-calendar-value';\r\nimport { Moment, unitOfTime } from 'moment';\r\nimport { CalendarValue } from '../../types/calendar-value';\r\nimport { IDate } from '../../models/date.model';\r\nimport { CalendarMode } from '../../types/calendar-mode';\r\nimport { DateValidator } from '../../types/validator.type';\r\nimport { ICalendarInternal } from '../../models/calendar.model';\r\nexport interface DateLimits {\r\n    minDate?: SingleCalendarValue;\r\n    maxDate?: SingleCalendarValue;\r\n    minTime?: SingleCalendarValue;\r\n    maxTime?: SingleCalendarValue;\r\n}\r\nexport declare class UtilsService {\r\n    static debounce(func: Function, wait: number): () => void;\r\n    createArray(size: number): number[];\r\n    convertToMoment(date: SingleCalendarValue, format: string): Moment;\r\n    isDateValid(date: string, format: string): boolean;\r\n    getDefaultDisplayDate(current: Moment, selected: Moment[], allowMultiSelect: boolean, minDate: Moment): Moment;\r\n    getInputType(value: CalendarValue, allowMultiSelect: boolean): ECalendarValue;\r\n    convertToMomentArray(value: CalendarValue, config: {\r\n        allowMultiSelect?: boolean;\r\n        format?: string;\r\n    }): Moment[];\r\n    convertFromMomentArray(format: string, value: Moment[], convertTo: ECalendarValue): CalendarValue;\r\n    convertToString(value: CalendarValue, format: string): string;\r\n    clearUndefined<T>(obj: T): T;\r\n    updateSelected(isMultiple: boolean, currentlySelected: Moment[], date: IDate, granularity?: unitOfTime.Base): Moment[];\r\n    closestParent(element: HTMLElement, selector: string): HTMLElement;\r\n    onlyTime(m: Moment): Moment;\r\n    granularityFromType(calendarType: CalendarMode): unitOfTime.Base;\r\n    createValidator({ minDate, maxDate, minTime, maxTime }: DateLimits, format: string, calendarType: CalendarMode): DateValidator;\r\n    datesStringToStringArray(value: string): string[];\r\n    getValidMomentArray(value: string, format: string): Moment[];\r\n    shouldShowCurrent(showGoToCurrent: boolean, mode: CalendarMode, min: Moment, max: Moment): boolean;\r\n    isDateInRange(date: Moment, from: Moment, to: Moment): boolean;\r\n    convertPropsToMoment(obj: {\r\n        [key: string]: any;\r\n    }, format: string, props: string[]): void;\r\n    shouldResetCurrentView<T extends ICalendarInternal>(prevConf: T, currentConf: T): boolean;\r\n    getNativeElement(elem: HTMLElement | string): HTMLElement;\r\n}\r\n"]}