{"version":3,"file":"date-picker.component.d.ts","sources":["date-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { IDate } from '../common/models/date.model';\r\nimport { DomHelper } from '../common/services/dom-appender/dom-appender.service';\r\nimport { UtilsService } from '../common/services/utils/utils.service';\r\nimport { CalendarMode } from '../common/types/calendar-mode';\r\nimport { CalendarValue } from '../common/types/calendar-value';\r\nimport { SingleCalendarValue } from '../common/types/single-calendar-value';\r\nimport { IDayCalendarConfig } from '../day-calendar/day-calendar-config.model';\r\nimport { DayCalendarComponent } from '../day-calendar/day-calendar.component';\r\nimport { IDayTimeCalendarConfig } from '../day-time-calendar/day-time-calendar-config.model';\r\nimport { ITimeSelectConfig } from '../time-select/time-select-config.model';\r\nimport { TimeSelectComponent } from '../time-select/time-select.component';\r\nimport { IDatePickerConfig, IDatePickerConfigInternal } from './date-picker-config.model';\r\nimport { IDpDayPickerApi } from './date-picker.api';\r\nimport { DatePickerService } from './date-picker.service';\r\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';\r\nimport { Moment, unitOfTime } from 'moment';\r\nimport { DateValidator } from '../common/types/validator.type';\r\nimport { MonthCalendarComponent } from '../month-calendar/month-calendar.component';\r\nimport { DayTimeCalendarComponent } from '../day-time-calendar/day-time-calendar.component';\r\nimport { INavEvent } from '../common/models/navigation-event.model';\r\nimport { SelectEvent } from '../common/types/selection-event.enum';\r\nimport { ISelectionEvent } from '../common/types/selection-event.model';\r\nexport declare class DatePickerComponent implements OnChanges, OnInit, AfterViewInit, ControlValueAccessor, Validator, OnDestroy {\r\n    private readonly dayPickerService;\r\n    private readonly domHelper;\r\n    private readonly elemRef;\r\n    private readonly renderer;\r\n    private readonly utilsService;\r\n    readonly cd: ChangeDetectorRef;\r\n    isInitialized: boolean;\r\n    config: IDatePickerConfig;\r\n    mode: CalendarMode;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n    displayDate: SingleCalendarValue;\r\n    theme: string;\r\n    minDate: SingleCalendarValue;\r\n    maxDate: SingleCalendarValue;\r\n    minTime: SingleCalendarValue;\r\n    maxTime: SingleCalendarValue;\r\n    open: EventEmitter<void>;\r\n    close: EventEmitter<void>;\r\n    onChange: EventEmitter<CalendarValue>;\r\n    onGoToCurrent: EventEmitter<void>;\r\n    onLeftNav: EventEmitter<INavEvent>;\r\n    onRightNav: EventEmitter<INavEvent>;\r\n    onSelect: EventEmitter<ISelectionEvent>;\r\n    calendarContainer: ElementRef;\r\n    dayCalendarRef: DayCalendarComponent;\r\n    monthCalendarRef: MonthCalendarComponent;\r\n    dayTimeCalendarRef: DayTimeCalendarComponent;\r\n    timeSelectRef: TimeSelectComponent;\r\n    componentConfig: IDatePickerConfigInternal;\r\n    dayCalendarConfig: IDayCalendarConfig;\r\n    dayTimeCalendarConfig: IDayTimeCalendarConfig;\r\n    timeSelectConfig: ITimeSelectConfig;\r\n    hideStateHelper: boolean;\r\n    inputValue: CalendarValue;\r\n    isFocusedTrigger: boolean;\r\n    inputElementValue: string;\r\n    calendarWrapper: HTMLElement;\r\n    appendToElement: HTMLElement;\r\n    inputElementContainer: HTMLElement;\r\n    popupElem: HTMLElement;\r\n    handleInnerElementClickUnlisteners: Function[];\r\n    globalListenersUnlisteners: Function[];\r\n    validateFn: DateValidator;\r\n    api: IDpDayPickerApi;\r\n    selectEvent: typeof SelectEvent;\r\n    private onOpenDelayTimeoutHandler;\r\n    constructor(dayPickerService: DatePickerService, domHelper: DomHelper, elemRef: ElementRef, renderer: Renderer2, utilsService: UtilsService, cd: ChangeDetectorRef);\r\n    get openOnFocus(): boolean;\r\n    get openOnClick(): boolean;\r\n    _areCalendarsShown: boolean;\r\n    get areCalendarsShown(): boolean;\r\n    set areCalendarsShown(value: boolean);\r\n    _selected: Moment[];\r\n    get selected(): Moment[];\r\n    set selected(selected: Moment[]);\r\n    _currentDateView: Moment;\r\n    get currentDateView(): Moment;\r\n    set currentDateView(date: Moment);\r\n    onClick(): void;\r\n    onBodyClick(): void;\r\n    onScroll(): void;\r\n    writeValue(value: CalendarValue): void;\r\n    registerOnChange(fn: any): void;\r\n    onChangeCallback(_: any, changedByInput: boolean): void;\r\n    registerOnTouched(fn: any): void;\r\n    onTouchedCallback(): void;\r\n    validate(formControl: FormControl): ValidationErrors;\r\n    processOnChangeCallback(selected: Moment[] | string): CalendarValue;\r\n    initValidators(): void;\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    setElementPositionInDom(): void;\r\n    setInputElementContainer(): void;\r\n    handleInnerElementClick(element: HTMLElement): void;\r\n    init(): void;\r\n    inputFocused(): void;\r\n    inputBlurred(): void;\r\n    showCalendars(): void;\r\n    hideCalendar(): void;\r\n    onViewDateChange(value: CalendarValue): void;\r\n    dateSelected(date: IDate, granularity: unitOfTime.Base, type: SelectEvent, ignoreClose?: boolean): void;\r\n    onDateClick(): void;\r\n    onKeyPress(event: KeyboardEvent): void;\r\n    moveCalendarTo(date: SingleCalendarValue): void;\r\n    onLeftNavClick(change: INavEvent): void;\r\n    onRightNavClick(change: INavEvent): void;\r\n    startGlobalListeners(): void;\r\n    stopGlobalListeners(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}