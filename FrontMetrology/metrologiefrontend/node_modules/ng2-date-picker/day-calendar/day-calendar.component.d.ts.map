{"version":3,"file":"day-calendar.component.d.ts","sources":["day-calendar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ECalendarValue } from '../common/types/calendar-value-enum';\r\nimport { SingleCalendarValue } from '../common/types/single-calendar-value';\r\nimport { ECalendarMode } from '../common/types/calendar-mode-enum';\r\nimport { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChange, SimpleChanges } from '@angular/core';\r\nimport { DayCalendarService } from './day-calendar.service';\r\nimport { Moment, unitOfTime } from 'moment';\r\nimport { IDayCalendarConfig, IDayCalendarConfigInternal } from './day-calendar-config.model';\r\nimport { IDay } from './day.model';\r\nimport { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';\r\nimport { CalendarValue } from '../common/types/calendar-value';\r\nimport { UtilsService } from '../common/services/utils/utils.service';\r\nimport { IMonthCalendarConfig } from '../month-calendar/month-calendar-config';\r\nimport { IMonth } from '../month-calendar/month.model';\r\nimport { DateValidator } from '../common/types/validator.type';\r\nimport { INavEvent } from '../common/models/navigation-event.model';\r\nexport declare class DayCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n    readonly dayCalendarService: DayCalendarService;\r\n    readonly utilsService: UtilsService;\r\n    readonly cd: ChangeDetectorRef;\r\n    config: IDayCalendarConfig;\r\n    displayDate: SingleCalendarValue;\r\n    minDate: Moment;\r\n    maxDate: Moment;\r\n    theme: string;\r\n    onSelect: EventEmitter<IDay>;\r\n    onMonthSelect: EventEmitter<IMonth>;\r\n    onNavHeaderBtnClick: EventEmitter<ECalendarMode>;\r\n    onGoToCurrent: EventEmitter<void>;\r\n    onLeftNav: EventEmitter<INavEvent>;\r\n    onRightNav: EventEmitter<INavEvent>;\r\n    CalendarMode: typeof ECalendarMode;\r\n    isInited: boolean;\r\n    componentConfig: IDayCalendarConfigInternal;\r\n    weeks: IDay[][];\r\n    weekdays: Moment[];\r\n    inputValue: CalendarValue;\r\n    inputValueType: ECalendarValue;\r\n    validateFn: DateValidator;\r\n    currentCalendarMode: ECalendarMode;\r\n    monthCalendarConfig: IMonthCalendarConfig;\r\n    _shouldShowCurrent: boolean;\r\n    navLabel: string;\r\n    showLeftNav: boolean;\r\n    showRightNav: boolean;\r\n    api: {\r\n        moveCalendarsBy: any;\r\n        moveCalendarTo: any;\r\n        toggleCalendarMode: any;\r\n    };\r\n    constructor(dayCalendarService: DayCalendarService, utilsService: UtilsService, cd: ChangeDetectorRef);\r\n    _selected: Moment[];\r\n    get selected(): Moment[];\r\n    set selected(selected: Moment[]);\r\n    _currentDateView: Moment;\r\n    get currentDateView(): Moment;\r\n    set currentDateView(current: Moment);\r\n    ngOnInit(): void;\r\n    init(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    writeValue(value: CalendarValue): void;\r\n    registerOnChange(fn: any): void;\r\n    onChangeCallback(_: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    validate(formControl: FormControl): ValidationErrors | any;\r\n    processOnChangeCallback(value: Moment[]): CalendarValue;\r\n    initValidators(): void;\r\n    dayClicked(day: IDay): void;\r\n    getDayBtnText(day: IDay): string;\r\n    getDayBtnCssClass(day: IDay): {\r\n        [klass: string]: boolean;\r\n    };\r\n    onLeftNavClick(): void;\r\n    onRightNavClick(): void;\r\n    onMonthCalendarLeftClick(change: INavEvent): void;\r\n    onMonthCalendarRightClick(change: INavEvent): void;\r\n    onMonthCalendarSecondaryLeftClick(change: INavEvent): void;\r\n    onMonthCalendarSecondaryRightClick(change: INavEvent): void;\r\n    getWeekdayName(weekday: Moment): string;\r\n    toggleCalendarMode(mode: ECalendarMode): void;\r\n    monthSelected(month: IMonth): void;\r\n    moveCalendarsBy(current: Moment, amount: number, granularity?: unitOfTime.Base): void;\r\n    moveCalendarTo(to: SingleCalendarValue): void;\r\n    shouldShowCurrent(): boolean;\r\n    goToCurrent(): void;\r\n    handleConfigChange(config: SimpleChange): void;\r\n}\r\n"]}