{"ast":null,"code":"import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_9_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_9_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r14 = i0.ɵɵreference(3);\n\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\n\nclass MatSelectSearchClearDirective {}\n\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectSearchClearDirective,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectSearchClearDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }]\n});\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\n\nconst configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'indexAndLengthScreenReaderText', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\n\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\n\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\n\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\n\nclass MatSelectNoEntriesFoundDirective {}\n\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectNoEntriesFoundDirective,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: MatSelectNoEntriesFoundDirective,\n  selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectNoEntriesFoundDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectNoEntriesFound]'\n    }]\n  }]\n});\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nclass MatSelectSearchComponent {\n  constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.liveAnnouncer = liveAnnouncer;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n\n    this.type = 'text';\n    /** Font-based icon used for displaying Close-Icon */\n\n    this.closeIcon = 'close';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n     *  Text that is appended to the currently active item label announced by screen readers,\n     *  informing the user of the current index, value and total options.\n     *  eg: Bank R (Germany) 1 of 6\n    */\n\n    this.indexAndLengthScreenReaderText = ' of ';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n\n    this.toogleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n\n    this.toggleAll = new EventEmitter();\n\n    this.onTouched = _ => {};\n\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n    this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    this.applyDefaultOptions(defaultOptions);\n  }\n\n  get isInsideMatOption() {\n    return !!this.matOption;\n  }\n  /** Current search value */\n\n\n  get value() {\n    return this._formControl.value;\n  }\n  /** Reference to the MatSelect options */\n\n\n  set _options(_options) {\n    this._options$.next(_options);\n  }\n\n  get _options() {\n    return this._options$.getValue();\n  }\n\n  applyDefaultOptions(defaultOptions) {\n    if (!defaultOptions) {\n      return;\n    }\n\n    for (const key of configurableDefaultOptions) {\n      if (defaultOptions.hasOwnProperty(key)) {\n        this[key] = defaultOptions[key];\n      }\n    }\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    } // set custom mat-option class if the component was placed inside a mat-option\n\n\n    if (this.matOption) {\n      this.matOption.disabled = true;\n\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    } // when the select dropdown panel is opened or closed\n\n\n    this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n      if (opened) {\n        this.updateInputWidth(); // focus the search field when opening\n\n        if (!this.disableInitialFocus) {\n          this._focus();\n        }\n      } else {\n        // clear it when closing\n        if (this.clearSearchInput) {\n          this._reset();\n        }\n      }\n    }); // set the first item active after the options changed\n\n    this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect._keyManager) {\n        this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n      } else {\n        console.log('_keyManager was not initialized.');\n      }\n\n      this._options = this.matSelect.options; // Closure variable for tracking the most recent first option.\n      // In order to avoid avoid causing the list to\n      // scroll to the top when options are added to the bottom of\n      // the list (eg: infinite scroll), we compare only\n      // the changes to the first options to determine if we\n      // should set the first item as active.\n      // This prevents unnecessary scrolling to the top of the list\n      // when options are appended, but allows the first item\n      // in the list to be set as active by default when there\n      // is no active selection\n\n      let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n      this._options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        // avoid \"expression has been changed\" error\n        setTimeout(() => {\n          // Convert the QueryList to an array\n          const options = this._options.toArray(); // The true first item is offset by 1\n\n\n          const currentFirstOption = options[this.getOptionsLengthOffset()];\n          const keyManager = this.matSelect._keyManager;\n\n          if (keyManager && this.matSelect.panelOpen) {\n            // set first item active and input width\n            // Check to see if the first option in these changes is different from the previous.\n            const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n            // Indiciates we should set it as active and scroll to the top.\n\n            if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n              keyManager.setFirstItemActive();\n            } // wait for panel width changes\n\n\n            setTimeout(() => {\n              this.updateInputWidth();\n            });\n\n            if (!this.disableScrollToActiveOnOptionsChanged) {\n              this.adjustScrollTopToFitActiveOptionIntoView();\n            }\n          } // Update our reference\n\n\n          previousFirstOption = currentFirstOption;\n        });\n      });\n    }); // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n\n    this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect.panelOpen) {\n        this.updateInputWidth();\n      }\n    });\n\n    this.initMultipleHandling();\n    this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible() {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n\n\n  _handleKeydown(event) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n\n\n  _handleKeyup(event) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n\n        this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n      }\n    }\n  }\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n\n\n  getAriaIndex(optionIndex) {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n\n    return optionIndex;\n  }\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n\n\n  getAriaLength() {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n\n  writeValue(value) {\n    this._lastExternalInputValue = value;\n\n    this._formControl.setValue(value);\n\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  registerOnChange(fn) {\n    this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Focuses the search input field\n   */\n\n\n  _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    } // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n\n\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop; // focus\n\n    this.searchSelectInput.nativeElement.focus();\n    panel.scrollTop = scrollTop;\n  }\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n\n\n  _reset(focus) {\n    this._formControl.setValue('');\n\n    if (focus) {\n      this._focus();\n    }\n  }\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n\n\n  initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n\n      return;\n    } // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n\n\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n    this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(selectedValues => {\n      let restoreSelectedValues = false;\n      const updatedSelectedValues = selectedValues && Array.isArray(selectedValues) ? [...selectedValues] : [];\n\n      if (this.matSelect.multiple) {\n        if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n          const optionValues = this.matSelect.options.map(option => option.value);\n          this.previousSelectedValues.forEach(previousValue => {\n            if (!updatedSelectedValues.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n              // if a value that was selected before is deselected and not found in the options, it was deselected\n              // due to the filtering, so we restore it.\n              updatedSelectedValues.push(previousValue);\n              restoreSelectedValues = true;\n            }\n          });\n        }\n      }\n\n      this.previousSelectedValues = updatedSelectedValues;\n\n      if (restoreSelectedValues) {\n        this.matSelect._onChange(updatedSelectedValues);\n      }\n    });\n  }\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n\n\n  adjustScrollTopToFitActiveOptionIntoView() {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n\n\n  updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n\n    let element = this.innerSelectSearch.nativeElement;\n    let panelElement;\n\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  getMatOptionHeight() {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n\n\n  getOptionsLengthOffset() {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n}\n\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectSearchComponent,\n  deps: [{\n    token: MatSelect\n  }, {\n    token: i0.ChangeDetectorRef\n  }, {\n    token: i1.ViewportRuler\n  }, {\n    token: MatOption,\n    optional: true\n  }, {\n    token: i2.LiveAnnouncer\n  }, {\n    token: MatFormField,\n    optional: true\n  }, {\n    token: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n    optional: true\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nMatSelectSearchComponent.ɵcmp = i0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      i0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    closeIcon: \"closeIcon\",\n    closeSvgIcon: \"closeSvgIcon\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectSearchComponent),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 11,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      i0.ɵɵelementStart(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 4, 2, \"div\", 8);\n      i0.ɵɵpipe(10, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.searching);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  directives: [i7.NgClass, i7.NgIf, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective, i8.MatTooltip],\n  pipes: [i7.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n  changeDetection: 0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: MatSelectSearchComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MatSelectSearchComponent),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i10.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i11.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: i2.LiveAnnouncer\n    }, {\n      type: i12.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n      }]\n    }];\n  },\n  propDecorators: {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeSvgIcon: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    indexAndLengthScreenReaderText: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toogleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    alwaysRestoreSelectedOptionsMulti: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective]\n    }],\n    noEntriesFound: [{\n      type: ContentChild,\n      args: [MatSelectNoEntriesFoundDirective]\n    }],\n    isInsideMatOption: [{\n      type: HostBinding,\n      args: ['class.mat-select-search-inside-mat-option']\n    }]\n  }\n});\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst MatSelectSearchVersion = '4.2.0';\n\nclass NgxMatSelectSearchModule {}\n\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: NgxMatSelectSearchModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: NgxMatSelectSearchModule,\n  declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n  imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule],\n  exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n});\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: NgxMatSelectSearchModule,\n  imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.10\",\n  ngImport: i0,\n  type: NgxMatSelectSearchModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n    }]\n  }]\n});\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions }; //# sourceMappingURL=ngx-mat-select-search.mjs.map","map":{"version":3,"sources":["C:/Users/09627879/Desktop/Projets Front/Metrologie Front/metrologiefrontend/node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.mjs","C:/Users/09627879/Desktop/Projets Front/Metrologie Front/metrologiefrontend/node_modules/src/app/mat-select-search/mat-select-search.component.html"],"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","HostBinding","NgModule","i9","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i11","_countGroupLabelsBeforeOption","MatOption","i12","MatFormField","i10","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","i1","i2","i3","MatCheckboxModule","i4","MatProgressSpinnerModule","i5","MatButtonModule","i6","MatIconModule","i7","CommonModule","i8","MatTooltipModule","MatSelectSearchClearDirective","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","ɵdir","ɵɵngDeclareClassMetadata","decorators","args","selector","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","configurableGlobalOptions","MATSELECTSEARCH_GLOBAL_OPTIONS","MatSelectNoEntriesFoundDirective","SELECT_PANEL_MAX_HEIGHT","MatSelectSearchComponent","constructor","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","matFormField","defaultOptions","placeholderLabel","closeIcon","noEntriesFoundLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","isInsideMatOption","next","getValue","key","hasOwnProperty","ngOnInit","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_reset","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","undefined","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","ngControl","previousSelectedValues","selectedValues","restoreSelectedValues","updatedSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","token","ChangeDetectorRef","ViewportRuler","optional","LiveAnnouncer","ɵcmp","provide","useExisting","multi","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatTooltip","AsyncPipe","providers","changeDetection","OnPush","template","styles","ctorParameters","propDecorators","closeSvgIcon","read","static","clearIcon","noEntriesFound","MatSelectSearchVersion","NgxMatSelectSearchModule","ɵmod","ɵɵngDeclareNgModule","declarations","imports","exports","ɵinj","ɵɵngDeclareInjector"],"mappings":"AAAA,SAASA,CAAT,EAAYC,CAAZ,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,KAA7C,EAAoDC,MAApD,EAA4DC,QAA5D,EAAsEC,UAAtE,QAAwF,uBAAxF;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DC,UAA9D,EAA0EC,SAA1E,EAAqFC,uBAArF,EAA8GC,MAA9G,EAAsHC,QAAtH,EAAgIC,KAAhI,EAAuIC,MAAvI,EAA+IC,SAA/I,EAA0JC,YAA1J,EAAwKC,WAAxK,EAAqLC,QAArL,QAAqM,eAArM;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,mBAAzC,QAAoE,gBAApE;AACA,OAAO,KAAKC,GAAZ,MAAqB,wBAArB;AACA,SAASC,6BAAT,EAAwCC,SAAxC,QAAyD,wBAAzD;AACA,OAAO,KAAKC,GAAZ,MAAqB,8BAArB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,0BAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,eAAT,EAA0BC,EAA1B,EAA8BC,aAA9B,EAA6CC,OAA7C,QAA4D,MAA5D;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,KAApC,EAA2CC,SAA3C,EAAsDC,IAAtD,EAA4DC,MAA5D,EAAoEC,GAApE,QAA+E,gBAA/E;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,oCAApB;AACA,SAASC,wBAAT,QAAyC,oCAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;gBAI+LpD,E;;AAAAA,IAAAA,EC7B7L,qC;AD6B6LA,IAAAA,ECrB/K;ADqB+KA,MAAAA,ECrB/K;AAAA,qBDqB+KA,ECrB/K;AAAA;AAAA,M;ADqB+KA,IAAAA,ECpB5L,e;;;;mBDoB4LA,E;AAAAA,IAAAA,EC5B/K,6S;;;;;;AD4B+KA,IAAAA,ECP7L,gC;;;;;;ADO6LA,IAAAA,ECG3L,6D;;;;;;ADH2LA,IAAAA,ECKzL,kC;ADLyLA,IAAAA,ECMvL,U;ADNuLA,IAAAA,ECOzL,e;;;;oBDPyLA,E;AAAAA,IAAAA,ECK/K,4C;ADL+KA,IAAAA,ECMvL,a;ADNuLA,IAAAA,ECMvL,+E;;;;;;iBDNuLA,E;;AAAAA,IAAAA,ECH7L,gC;ADG6LA,IAAAA,ECCrL;ADDqLA,MAAAA,ECCrL;AAAA,sBDDqLA,ECCrL;AAAA,4BAAgB,IAAhB;AAAA,M;ADDqLA,IAAAA,ECG3L,+F;ADH2LA,IAAAA,ECI3L,wGDJ2LA,ECI3L,wB;ADJ2LA,IAAAA,ECS7L,e;;;;gBDT6LA,E;;mBAAAA,E;AAAAA,IAAAA,ECG9K,a;ADH8KA,IAAAA,ECG9K,sD;;;;;;ADH8KA,IAAAA,ECiB7L,4E;;;;;;ADjB6LA,IAAAA,ECmBzJ,U;;;;oBDnByJA,E;AAAAA,IAAAA,ECmBzJ,+C;;;;;;ADnByJA,IAAAA,ECe/L,6B;ADf+LA,IAAAA,ECiB7L,4F;ADjB6LA,IAAAA,ECmB7L,qGDnB6LA,ECmB7L,wB;ADnB6LA,IAAAA,ECoB/L,e;;;;iBDpB+LA,E;;mBAAAA,E;AAAAA,IAAAA,ECiBhL,a;ADjBgLA,IAAAA,ECiBhL,4D;;;;;;;;;;;;;;;ADpBf,MAAMqD,6BAAN,CAAoC;;AAEpCA,6BAA6B,CAACC,IAA9B,GAAqCtD,EAAE,CAACuD,kBAAH,CAAsB;AAAEC,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEN,6BAAhE;AAA+FO,EAAAA,IAAI,EAAE,EAArG;AAAyGC,EAAAA,MAAM,EAAE7D,EAAE,CAAC8D,eAAH,CAAmB7D;AAApI,CAAtB,CAArC;AACAoD,6BAA6B,CAACU,IAA9B,GAA+L/D,EAA/L;AAAA,QAA+GqD,6BAA/G;AAAA;AAAA;AACArD,EAAE,CAACgE,wBAAH,CAA4B;AAAER,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEN,6BAAhE;AAA+FY,EAAAA,UAAU,EAAE,CAAC;AAC5HN,IAAAA,IAAI,EAAE1D,SADsH;AAE5HiE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAFsH,GAAD;AAA3G,CAA5B;AAOA;;AACA,MAAMC,0BAA0B,GAAG,CAC/B,WAD+B,EAE/B,kBAF+B,EAG/B,WAH+B,EAI/B,cAJ+B,EAK/B,qBAL+B,EAM/B,uCAN+B,EAO/B,4BAP+B,EAQ/B,uBAR+B,EAS/B,gCAT+B,EAU/B,qBAV+B,EAW/B,kBAX+B,EAY/B,8BAZ+B,EAa/B,WAb+B,CAAnC;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gCAAgC,GAAG,IAAInE,cAAJ,CAAmB,kCAAnB,CAAzC;AACA;;AACA,MAAMoE,yBAAyB,GAAGF,0BAAlC;AACA;;AACA,MAAMG,8BAA8B,GAAGF,gCAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMG,gCAAN,CAAuC;;AAEvCA,gCAAgC,CAAClB,IAAjC,GAAwCtD,EAAE,CAACuD,kBAAH,CAAsB;AAAEC,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEa,gCAAhE;AAAkGZ,EAAAA,IAAI,EAAE,EAAxG;AAA4GC,EAAAA,MAAM,EAAE7D,EAAE,CAAC8D,eAAH,CAAmB7D;AAAvI,CAAtB,CAAxC;AACAuE,gCAAgC,CAACT,IAAjC,GA3D+L/D,EA2D/L;AAAA,QAAkHwE,gCAAlH;AAAA;AAAA;AACAxE,EAAE,CAACgE,wBAAH,CAA4B;AAAER,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEa,gCAAhE;AAAkGP,EAAAA,UAAU,EAAE,CAAC;AAC/HN,IAAAA,IAAI,EAAE1D,SADyH;AAE/HiE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAFyH,GAAD;AAA9G,CAA5B;AAOA;;AACA,MAAMM,uBAAuB,GAAG,GAAhC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,wBAAN,CAA+B;AAC3BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,iBAAZ,EAA+BC,cAA/B,EAA+CC,SAAS,GAAG,IAA3D,EAAiEC,aAAjE,EAAgFC,YAAY,GAAG,IAA/F,EAAqGC,cAArG,EAAqH;AAC5H,SAAKN,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA;;AACA,SAAKE,gBAAL,GAAwB,OAAxB;AACA;;AACA,SAAKxB,IAAL,GAAY,MAAZ;AACA;;AACA,SAAKyB,SAAL,GAAiB,OAAjB;AACA;;AACA,SAAKC,mBAAL,GAA2B,yBAA3B;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,8BAAL,GAAsC,MAAtC;AACA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA;;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA;AACR;AACA;AACA;;AACQ,SAAKC,4BAAL,GAAoC,KAApC;AACA;;AACA,SAAKC,qCAAL,GAA6C,KAA7C;AACA;;AACA,SAAKC,SAAL,GAAiB,iBAAjB;AACA;;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACA;;AACA,SAAKC,wBAAL,GAAgC,KAAhC;AACA;;AACA,SAAKC,8BAAL,GAAsC,KAAtC;AACA;;AACA,SAAKC,+BAAL,GAAuC,EAAvC;AACA;;AACA,SAAKC,gCAAL,GAAwC,OAAxC;AACA;;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACA;AACR;AACA;AACA;;AACQ,SAAKC,iCAAL,GAAyC,KAAzC;AACA;;AACA,SAAKC,SAAL,GAAiB,IAAIlG,YAAJ,EAAjB;;AACA,SAAKmG,SAAL,GAAkBC,CAAD,IAAO,CAAG,CAA3B;;AACA,SAAKC,SAAL,GAAiB,IAAI7E,eAAJ,CAAoB,IAApB,CAAjB;AACA,SAAK8E,YAAL,GAAoB,KAAKD,SAAL,CAAeE,IAAf,CAAoB3E,SAAS,CAAC4E,QAAQ,IAAIA,QAAQ,GAClEA,QAAQ,CAACC,OAAT,CAAiBF,IAAjB,CAAsB1E,GAAG,CAAC6E,OAAO,IAAIA,OAAO,CAACC,OAAR,EAAZ,CAAzB,EAAyD7E,SAAS,CAAC0E,QAAQ,CAACG,OAAT,EAAD,CAAlE,CADkE,GACwBlF,EAAE,CAAC,IAAD,CAD/C,CAA7B,CAApB;AAEA,SAAKmF,cAAL,GAAsB,KAAKN,YAAL,CAAkBC,IAAlB,CAAuB1E,GAAG,CAAC6E,OAAO,IAAIA,OAAO,GAAGA,OAAO,CAACG,MAAX,GAAoB,CAAvC,CAA1B,CAAtB;AACA,SAAKC,YAAL,GAAoB,IAAIhG,WAAJ,CAAgB,EAAhB,CAApB;AACA;;AACA,SAAKiG,oBAAL,GAA4BrF,aAAa,CAAC,CACtC,KAAKoF,YAAL,CAAkBE,YADoB,EAEtC,KAAKJ,cAFiC,CAAD,CAAb,CAGzBL,IAHyB,CAGpB1E,GAAG,CAAC,CAAC,CAACoF,KAAD,EAAQC,aAAR,CAAD,KAA4B,KAAKhC,mBAAL,IAA4B+B,KAA5B,IACjCC,aAAa,KAAK,KAAKC,sBAAL,EADd,CAHiB,CAA5B;AAKA;;AACA,SAAKC,UAAL,GAAkB,IAAIzF,OAAJ,EAAlB;AACA,SAAK0F,mBAAL,CAAyBtC,cAAzB;AACH;;AACD,MAAIuC,iBAAJ,GAAwB;AACpB,WAAO,CAAC,CAAC,KAAK1C,SAAd;AACH;AACD;;;AACA,MAAIqC,KAAJ,GAAY;AACR,WAAO,KAAKH,YAAL,CAAkBG,KAAzB;AACH;AACD;;;AACA,MAAIT,QAAJ,CAAaA,QAAb,EAAuB;AACnB,SAAKH,SAAL,CAAekB,IAAf,CAAoBf,QAApB;AACH;;AACD,MAAIA,QAAJ,GAAe;AACX,WAAO,KAAKH,SAAL,CAAemB,QAAf,EAAP;AACH;;AACDH,EAAAA,mBAAmB,CAACtC,cAAD,EAAiB;AAChC,QAAI,CAACA,cAAL,EAAqB;AACjB;AACH;;AACD,SAAK,MAAM0C,GAAX,IAAkBxD,0BAAlB,EAA8C;AAC1C,UAAIc,cAAc,CAAC2C,cAAf,CAA8BD,GAA9B,CAAJ,EAAwC;AACpC,aAAKA,GAAL,IAAY1C,cAAc,CAAC0C,GAAD,CAA1B;AACH;AACJ;AACJ;;AACDE,EAAAA,QAAQ,GAAG;AACP;AACA,UAAMC,UAAU,GAAG,yBAAnB;;AACA,QAAI,KAAKnD,SAAL,CAAemD,UAAnB,EAA+B;AAC3B,UAAIC,KAAK,CAACC,OAAN,CAAc,KAAKrD,SAAL,CAAemD,UAA7B,CAAJ,EAA8C;AAC1C,aAAKnD,SAAL,CAAemD,UAAf,CAA0BG,IAA1B,CAA+BH,UAA/B;AACH,OAFD,MAGK,IAAI,OAAO,KAAKnD,SAAL,CAAemD,UAAtB,KAAqC,QAAzC,EAAmD;AACpD,aAAKnD,SAAL,CAAemD,UAAf,GAA4B,CAAC,KAAKnD,SAAL,CAAemD,UAAhB,EAA4BA,UAA5B,CAA5B;AACH,OAFI,MAGA,IAAI,OAAO,KAAKnD,SAAL,CAAemD,UAAtB,KAAqC,QAAzC,EAAmD;AACpD,aAAKnD,SAAL,CAAemD,UAAf,CAA0BA,UAA1B,IAAwC,IAAxC;AACH;AACJ,KAVD,MAWK;AACD,WAAKnD,SAAL,CAAemD,UAAf,GAA4BA,UAA5B;AACH,KAhBM,CAiBP;;;AACA,QAAI,KAAKhD,SAAT,EAAoB;AAChB,WAAKA,SAAL,CAAeoD,QAAf,GAA0B,IAA1B;;AACA,WAAKpD,SAAL,CAAeqD,eAAf,GAAiCC,SAAjC,CAA2CC,GAA3C,CAA+C,4BAA/C;AACH,KAHD,MAIK;AACDC,MAAAA,OAAO,CAACC,KAAR,CAAc,sEAAd;AACH,KAxBM,CAyBP;;;AACA,SAAK5D,SAAL,CAAe6D,YAAf,CACK/B,IADL,CACUxE,KAAK,CAAC,CAAD,CADf,EACoBC,SAAS,CAAC,KAAKoF,UAAN,CAD7B,EAEKmB,SAFL,CAEgBC,MAAD,IAAY;AACvB,UAAIA,MAAJ,EAAY;AACR,aAAKC,gBAAL,GADQ,CAER;;AACA,YAAI,CAAC,KAAKnD,mBAAV,EAA+B;AAC3B,eAAKoD,MAAL;AACH;AACJ,OAND,MAOK;AACD;AACA,YAAI,KAAKtD,gBAAT,EAA2B;AACvB,eAAKuD,MAAL;AACH;AACJ;AACJ,KAhBD,EA1BO,CA2CP;;AACA,SAAKlE,SAAL,CAAe6D,YAAf,CACK/B,IADL,CACUtE,IAAI,CAAC,CAAD,CADd,EAEKsE,IAFL,CAEUvE,SAAS,CAAC,KAAKoF,UAAN,CAFnB,EAGKmB,SAHL,CAGe,MAAM;AACjB,UAAI,KAAK9D,SAAL,CAAemE,WAAnB,EAAgC;AAC5B,aAAKnE,SAAL,CAAemE,WAAf,CAA2BC,MAA3B,CAAkCtC,IAAlC,CAAuCvE,SAAS,CAAC,KAAKoF,UAAN,CAAhD,EACKmB,SADL,CACe,MAAM,KAAKO,wCAAL,EADrB;AAEH,OAHD,MAIK;AACDV,QAAAA,OAAO,CAACW,GAAR,CAAY,kCAAZ;AACH;;AACD,WAAKvC,QAAL,GAAgB,KAAK/B,SAAL,CAAeiC,OAA/B,CARiB,CASjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIsC,mBAAmB,GAAG,KAAKxC,QAAL,CAAcG,OAAd,GAAwB,KAAKQ,sBAAL,EAAxB,CAA1B;;AACA,WAAKX,QAAL,CAAcC,OAAd,CACKF,IADL,CACUvE,SAAS,CAAC,KAAKoF,UAAN,CADnB,EAEKmB,SAFL,CAEe,MAAM;AACjB;AACAU,QAAAA,UAAU,CAAC,MAAM;AACb;AACA,gBAAMvC,OAAO,GAAG,KAAKF,QAAL,CAAcG,OAAd,EAAhB,CAFa,CAGb;;;AACA,gBAAMuC,kBAAkB,GAAGxC,OAAO,CAAC,KAAKS,sBAAL,EAAD,CAAlC;AACA,gBAAMgC,UAAU,GAAG,KAAK1E,SAAL,CAAemE,WAAlC;;AACA,cAAIO,UAAU,IAAI,KAAK1E,SAAL,CAAe2E,SAAjC,EAA4C;AACxC;AACA;AACA,kBAAMC,oBAAoB,GAAG,CAAC,KAAK5E,SAAL,CAAe6E,WAAf,CAA2BN,mBAA3B,EAAgDE,kBAAhD,CAA9B,CAHwC,CAIxC;AACA;;AACA,gBAAIG,oBAAoB,IACjB,CAACF,UAAU,CAACI,UADf,IAEG,CAAC7C,OAAO,CAAC8C,IAAR,CAAaC,MAAM,IAAI,KAAKhF,SAAL,CAAe6E,WAAf,CAA2BG,MAA3B,EAAmCN,UAAU,CAACI,UAA9C,CAAvB,CAFR,EAE2F;AACvFJ,cAAAA,UAAU,CAACO,kBAAX;AACH,aAVuC,CAWxC;;;AACAT,YAAAA,UAAU,CAAC,MAAM;AACb,mBAAKR,gBAAL;AACH,aAFS,CAAV;;AAGA,gBAAI,CAAC,KAAKhD,qCAAV,EAAiD;AAC7C,mBAAKqD,wCAAL;AACH;AACJ,WAxBY,CAyBb;;;AACAE,UAAAA,mBAAmB,GAAGE,kBAAtB;AACH,SA3BS,CAAV;AA4BH,OAhCD;AAiCH,KAxDD,EA5CO,CAqGP;AACA;;AACA,SAAKnC,oBAAL,CAA0BR,IAA1B,CAA+BvE,SAAS,CAAC,KAAKoF,UAAN,CAAxC,EAA2DmB,SAA3D,CAAqEoB,kBAAkB,IAAI;AACvF;AACA,UAAI,KAAK/E,SAAT,EAAoB;AAChB,YAAI+E,kBAAJ,EAAwB;AACpB,eAAK/E,SAAL,CAAeqD,eAAf,GAAiCC,SAAjC,CAA2CC,GAA3C,CAA+C,oCAA/C;AACH,SAFD,MAGK;AACD,eAAKvD,SAAL,CAAeqD,eAAf,GAAiCC,SAAjC,CAA2C0B,MAA3C,CAAkD,oCAAlD;AACH;AACJ;AACJ,KAVD,EAvGO,CAkHP;;;AACA,SAAKjF,cAAL,CAAoBkE,MAApB,GACKtC,IADL,CACUvE,SAAS,CAAC,KAAKoF,UAAN,CADnB,EAEKmB,SAFL,CAEe,MAAM;AACjB,UAAI,KAAK9D,SAAL,CAAe2E,SAAnB,EAA8B;AAC1B,aAAKX,gBAAL;AACH;AACJ,KAND;;AAOA,SAAKoB,oBAAL;AACA,SAAKvD,YAAL,CAAkBC,IAAlB,CAAuBvE,SAAS,CAAC,KAAKoF,UAAN,CAAhC,EAAmDmB,SAAnD,CAA6D,MAAM;AAC/D;AACA,WAAK7D,iBAAL,CAAuBoF,YAAvB;AACH,KAHD;AAIH;;AACDC,EAAAA,6BAA6B,CAACC,KAAD,EAAQ;AACjC,SAAK9D,SAAL,CAAe+D,IAAf,CAAoBD,KAApB;AACH;;AACDE,EAAAA,WAAW,GAAG;AACV,SAAK9C,UAAL,CAAgBG,IAAhB;;AACA,SAAKH,UAAL,CAAgB+C,QAAhB;AACH;;AACDC,EAAAA,2BAA2B,GAAG;AAC1B,WAAO,KAAK3F,SAAL,CAAe4F,QAAf,IAA2B,KAAK1E,qBAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI2E,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB;AACA,QAAKA,KAAK,CAAC9C,GAAN,IAAa8C,KAAK,CAAC9C,GAAN,CAAUZ,MAAV,KAAqB,CAAnC,IACC0D,KAAK,CAACC,OAAN,IAAiBtL,CAAjB,IAAsBqL,KAAK,CAACC,OAAN,IAAiBrL,CADxC,IAECoL,KAAK,CAACC,OAAN,IAAiBpL,IAAjB,IAAyBmL,KAAK,CAACC,OAAN,IAAiBnL,IAF3C,IAGCkL,KAAK,CAACC,OAAN,KAAkBlL,KAHnB,IAII,KAAKkG,4BAAL,KAAsC+E,KAAK,CAACC,OAAN,KAAkBjL,IAAlB,IAA0BgL,KAAK,CAACC,OAAN,KAAkBhL,GAAlF,CAJR,EAIiG;AAC7F+K,MAAAA,KAAK,CAACE,eAAN;AACH;;AACD,QAAI,KAAKhG,SAAL,CAAe4F,QAAf,IAA2BE,KAAK,CAAC9C,GAAjC,IAAwC8C,KAAK,CAACC,OAAN,KAAkB/K,KAA9D,EAAqE;AACjE;AACAwJ,MAAAA,UAAU,CAAC,MAAM,KAAKP,MAAL,EAAP,CAAV;AACH,KAZiB,CAalB;;;AACA,QAAI,KAAKnD,0BAAL,KAAoC,IAApC,IAA4CgF,KAAK,CAACC,OAAN,KAAkB9K,MAA9D,IAAwE,KAAKuH,KAAjF,EAAwF;AACpF,WAAK0B,MAAL,CAAY,IAAZ;;AACA4B,MAAAA,KAAK,CAACE,eAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACH,KAAD,EAAQ;AAChB,QAAIA,KAAK,CAACC,OAAN,KAAkB7K,QAAlB,IAA8B4K,KAAK,CAACC,OAAN,KAAkB5K,UAApD,EAAgE;AAC5D,YAAM+K,sBAAsB,GAAG,KAAKlG,SAAL,CAAemG,wBAAf,EAA/B;;AACA,YAAMC,KAAK,GAAG,KAAKrE,QAAL,CAAcG,OAAd,GAAwBmE,SAAxB,CAAkCC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,sBAAtD,CAAd;;AACA,UAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,cAAMI,gBAAgB,GAAG,KAAKzE,QAAL,CAAcG,OAAd,GAAwBkE,KAAxB,CAAzB;;AACA,aAAKhG,aAAL,CAAmBqG,QAAnB,CAA4BD,gBAAgB,CAACE,SAAjB,GAA6B,GAA7B,GACtB,KAAKC,YAAL,CAAkBP,KAAlB,CADsB,GAEtB,KAAK1F,8BAFiB,GAGtB,KAAKkG,aAAL,EAHN;AAIH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACID,EAAAA,YAAY,CAACE,WAAD,EAAc;AACtB,QAAI,KAAKnE,sBAAL,OAAkC,CAAtC,EAAyC;AACrC,aAAOmE,WAAW,GAAG,CAArB;AACH;;AACD,WAAOA,WAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACID,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAK7E,QAAL,CAAcG,OAAd,GAAwBE,MAAxB,GAAiC,KAAKM,sBAAL,EAAxC;AACH;;AACDoE,EAAAA,UAAU,CAACtE,KAAD,EAAQ;AACd,SAAKuE,uBAAL,GAA+BvE,KAA/B;;AACA,SAAKH,YAAL,CAAkB2E,QAAlB,CAA2BxE,KAA3B;;AACA,SAAKvC,iBAAL,CAAuBoF,YAAvB;AACH;;AACD4B,EAAAA,MAAM,GAAG;AACL,SAAKvF,SAAL;AACH;;AACDwF,EAAAA,gBAAgB,CAACC,EAAD,EAAK;AACjB,SAAK9E,YAAL,CAAkBE,YAAlB,CAA+BT,IAA/B,CAAoCrE,MAAM,CAAC+E,KAAK,IAAIA,KAAK,KAAK,KAAKuE,uBAAzB,CAA1C,EAA6FrJ,GAAG,CAAC,MAAM,KAAKqJ,uBAAL,GAA+BK,SAAtC,CAAhG,EAAkJ7J,SAAS,CAAC,KAAKoF,UAAN,CAA3J,EAA8KmB,SAA9K,CAAwLqD,EAAxL;AACH;;AACDE,EAAAA,iBAAiB,CAACF,EAAD,EAAK;AAClB,SAAKzF,SAAL,GAAiByF,EAAjB;AACH;AACD;AACJ;AACA;;;AACIlD,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKqD,iBAAN,IAA2B,CAAC,KAAKtH,SAAL,CAAeuH,KAA/C,EAAsD;AAClD;AACH,KAHI,CAIL;AACA;;;AACA,UAAMA,KAAK,GAAG,KAAKvH,SAAL,CAAeuH,KAAf,CAAqBC,aAAnC;AACA,UAAMC,SAAS,GAAGF,KAAK,CAACE,SAAxB,CAPK,CAQL;;AACA,SAAKH,iBAAL,CAAuBE,aAAvB,CAAqCE,KAArC;AACAH,IAAAA,KAAK,CAACE,SAAN,GAAkBA,SAAlB;AACH;AACD;AACJ;AACA;AACA;;;AACIvD,EAAAA,MAAM,CAACwD,KAAD,EAAQ;AACV,SAAKrF,YAAL,CAAkB2E,QAAlB,CAA2B,EAA3B;;AACA,QAAIU,KAAJ,EAAW;AACP,WAAKzD,MAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACImB,EAAAA,oBAAoB,GAAG;AACnB,QAAI,CAAC,KAAKpF,SAAL,CAAe2H,SAApB,EAA+B;AAC3B,UAAI,KAAK3H,SAAL,CAAe4F,QAAnB,EAA6B;AACzB;AACA;AACAjC,QAAAA,OAAO,CAACC,KAAR,CAAc,iHAAd;AACH;;AACD;AACH,KARkB,CASnB;AACA;AACA;;;AACA,SAAKgE,sBAAL,GAA8B,KAAK5H,SAAL,CAAe2H,SAAf,CAAyBnF,KAAvD;AACA,SAAKxC,SAAL,CAAe2H,SAAf,CAAyBpF,YAAzB,CACKT,IADL,CACUvE,SAAS,CAAC,KAAKoF,UAAN,CADnB,EAEKmB,SAFL,CAEgB+D,cAAD,IAAoB;AAC/B,UAAIC,qBAAqB,GAAG,KAA5B;AACA,YAAMC,qBAAqB,GAAGF,cAAc,IAAIzE,KAAK,CAACC,OAAN,CAAcwE,cAAd,CAAlB,GACxB,CAAC,GAAGA,cAAJ,CADwB,GAExB,EAFN;;AAGA,UAAI,KAAK7H,SAAL,CAAe4F,QAAnB,EAA6B;AACzB,YAAI,CAAC,KAAKpE,iCAAL,IAA2C,KAAKa,YAAL,CAAkBG,KAAlB,IAA2B,KAAKH,YAAL,CAAkBG,KAAlB,CAAwBJ,MAA/F,KACG,KAAKwF,sBADR,IACkCxE,KAAK,CAACC,OAAN,CAAc,KAAKuE,sBAAnB,CADtC,EACkF;AAC9E,gBAAMI,YAAY,GAAG,KAAKhI,SAAL,CAAeiC,OAAf,CAAuB7E,GAAvB,CAA2B4H,MAAM,IAAIA,MAAM,CAACxC,KAA5C,CAArB;AACA,eAAKoF,sBAAL,CAA4BK,OAA5B,CAAoCC,aAAa,IAAI;AACjD,gBAAI,CAACH,qBAAqB,CAACI,IAAtB,CAA2BC,CAAC,IAAI,KAAKpI,SAAL,CAAe6E,WAAf,CAA2BuD,CAA3B,EAA8BF,aAA9B,CAAhC,CAAD,IACG,CAACF,YAAY,CAACG,IAAb,CAAkBC,CAAC,IAAI,KAAKpI,SAAL,CAAe6E,WAAf,CAA2BuD,CAA3B,EAA8BF,aAA9B,CAAvB,CADR,EAC8E;AAC1E;AACA;AACAH,cAAAA,qBAAqB,CAACzE,IAAtB,CAA2B4E,aAA3B;AACAJ,cAAAA,qBAAqB,GAAG,IAAxB;AACH;AACJ,WARD;AASH;AACJ;;AACD,WAAKF,sBAAL,GAA8BG,qBAA9B;;AACA,UAAID,qBAAJ,EAA2B;AACvB,aAAK9H,SAAL,CAAeqI,SAAf,CAAyBN,qBAAzB;AACH;AACJ,KA1BD;AA2BH;AACD;AACJ;AACA;;;AACI1D,EAAAA,wCAAwC,GAAG;AACvC,QAAI,KAAKrE,SAAL,CAAeuH,KAAf,IAAwB,KAAKvH,SAAL,CAAeiC,OAAf,CAAuBG,MAAvB,GAAgC,CAA5D,EAA+D;AAC3D,YAAMkG,eAAe,GAAG,KAAKC,kBAAL,EAAxB;AACA,YAAMC,iBAAiB,GAAG,KAAKxI,SAAL,CAAemE,WAAf,CAA2BsE,eAA3B,IAA8C,CAAxE;;AACA,YAAMC,UAAU,GAAGjM,6BAA6B,CAAC+L,iBAAD,EAAoB,KAAKxI,SAAL,CAAeiC,OAAnC,EAA4C,KAAKjC,SAAL,CAAe2I,YAA3D,CAAhD,CAH2D,CAI3D;;;AACA,YAAMC,0BAA0B,GAAG,CAAC,KAAKzI,SAAL,GAAiB,CAAC,CAAlB,GAAsB,CAAvB,IAA4BuI,UAA5B,GAAyCF,iBAA5E;AACA,YAAMK,gBAAgB,GAAG,KAAK7I,SAAL,CAAeuH,KAAf,CAAqBC,aAArB,CAAmCC,SAA5D;AACA,YAAMqB,iBAAiB,GAAG,KAAKC,iBAAL,CAAuBvB,aAAvB,CAAqCwB,YAA/D;AACA,YAAMC,sBAAsB,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACtJ,uBAAuB,GAAGiJ,iBAA3B,IAAgDR,eAA3D,CAA/B;AACA,YAAMc,yBAAyB,GAAGF,IAAI,CAACG,KAAL,CAAW,CAACR,gBAAgB,GAAGC,iBAApB,IAAyCR,eAApD,IAAuE,CAAzG;;AACA,UAAIc,yBAAyB,IAAIR,0BAAjC,EAA6D;AACzD,aAAK5I,SAAL,CAAeuH,KAAf,CAAqBC,aAArB,CAAmCC,SAAnC,GAA+CmB,0BAA0B,GAAGN,eAA5E;AACH,OAFD,MAGK,IAAIc,yBAAyB,GAAGH,sBAA5B,IAAsDL,0BAA1D,EAAsF;AACvF,aAAK5I,SAAL,CAAeuH,KAAf,CAAqBC,aAArB,CAAmCC,SAAnC,GAA+C,CAACmB,0BAA0B,GAAG,CAA9B,IAAmCN,eAAnC,IACxCzI,uBAAuB,GAAGiJ,iBADc,CAA/C;AAEH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;AACI9E,EAAAA,gBAAgB,GAAG;AACf,QAAI,CAAC,KAAK+E,iBAAN,IAA2B,CAAC,KAAKA,iBAAL,CAAuBvB,aAAvD,EAAsE;AAClE;AACH;;AACD,QAAI8B,OAAO,GAAG,KAAKP,iBAAL,CAAuBvB,aAArC;AACA,QAAI+B,YAAJ;;AACA,WAAOD,OAAO,GAAGA,OAAO,CAACE,aAAzB,EAAwC;AACpC,UAAIF,OAAO,CAAC7F,SAAR,CAAkBgG,QAAlB,CAA2B,kBAA3B,CAAJ,EAAoD;AAChDF,QAAAA,YAAY,GAAGD,OAAf;AACA;AACH;AACJ;;AACD,QAAIC,YAAJ,EAAkB;AACd,WAAKR,iBAAL,CAAuBvB,aAAvB,CAAqCkC,KAArC,CAA2CC,KAA3C,GAAmDJ,YAAY,CAACK,WAAb,GAA2B,IAA9E;AACH;AACJ;;AACDrB,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKvI,SAAL,CAAeiC,OAAf,CAAuBG,MAAvB,GAAgC,CAApC,EAAuC;AACnC,aAAO,KAAKpC,SAAL,CAAeiC,OAAf,CAAuB4H,KAAvB,CAA6BrG,eAA7B,GAA+CsG,qBAA/C,GAAuEC,MAA9E;AACH;;AACD,WAAO,CAAP;AACH;AACD;AACJ;AACA;;;AACIrH,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKvC,SAAT,EAAoB;AAChB,aAAO,CAAP;AACH,KAFD,MAGK;AACD,aAAO,CAAP;AACH;AACJ;;AA5b0B;;AA8b/BL,wBAAwB,CAACpB,IAAzB,GAAgCtD,EAAE,CAACuD,kBAAH,CAAsB;AAAEC,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEe,wBAAhE;AAA0Fd,EAAAA,IAAI,EAAE,CAAC;AAAEgL,IAAAA,KAAK,EAAElN;AAAT,GAAD,EAAuB;AAAEkN,IAAAA,KAAK,EAAE5O,EAAE,CAAC6O;AAAZ,GAAvB,EAAwD;AAAED,IAAAA,KAAK,EAAErM,EAAE,CAACuM;AAAZ,GAAxD,EAAqF;AAAEF,IAAAA,KAAK,EAAEtN,SAAT;AAAoByN,IAAAA,QAAQ,EAAE;AAA9B,GAArF,EAA2H;AAAEH,IAAAA,KAAK,EAAEpM,EAAE,CAACwM;AAAZ,GAA3H,EAAwJ;AAAEJ,IAAAA,KAAK,EAAEpN,YAAT;AAAuBuN,IAAAA,QAAQ,EAAE;AAAjC,GAAxJ,EAAiM;AAAEH,IAAAA,KAAK,EAAEvK,gCAAT;AAA2C0K,IAAAA,QAAQ,EAAE;AAArD,GAAjM,CAAhG;AAA+VlL,EAAAA,MAAM,EAAE7D,EAAE,CAAC8D,eAAH,CAAmBxD;AAA1X,CAAtB,CAAhC;AACAoE,wBAAwB,CAACuK,IAAzB,GAnlB+LjP,EAmlB/L;AAAA,QAA0G0E,wBAA1G;AAAA;AAAA;AAAA;AAnlB+L1E,MAAAA,EAmlB/L,0BAMsEqD,6BANtE;AAnlB+LrD,MAAAA,EAmlB/L,0BAMoLwE,gCANpL;AAAA;;AAAA;AAAA;;AAnlB+LxE,MAAAA,EAmlB/L,qBAnlB+LA,EAmlB/L;AAnlB+LA,MAAAA,EAmlB/L,qBAnlB+LA,EAmlB/L;AAAA;AAAA;AAAA;AAAA;AAnlB+LA,MAAAA,EAmlB/L,qBAMuWK,UANvW;AAnlB+LL,MAAAA,EAmlB/L,qBAMgfK,UANhf;AAAA;;AAAA;AAAA;;AAnlB+LL,MAAAA,EAmlB/L,qBAnlB+LA,EAmlB/L;AAnlB+LA,MAAAA,EAmlB/L,qBAnlB+LA,EAmlB/L;AAAA;AAAA;AAAA;AAAA;AAAA;AAnlB+LA,MAAAA,EAmlB/L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAnlB+LA,EAmlB/L,oBAAgxC,CACxwC;AACIkP,IAAAA,OAAO,EAAEhO,iBADb;AAEIiO,IAAAA,WAAW,EAAE/O,UAAU,CAAC,MAAMsE,wBAAP,CAF3B;AAGI0K,IAAAA,KAAK,EAAE;AAHX,GADwwC,CAAhxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnlB+LpP,MAAAA,EAmlB/L;AAnlB+LA,MAAAA,ECrC/L,yBDwnBA;AAnlB+LA,MAAAA,EClC/L,+BDqnBA;AAnlB+LA,MAAAA,EC7B7L,yFDgnBF;AAnlB+LA,MAAAA,EClB7L,iCDqmBF;AAnlB+LA,MAAAA,ECbtL;AAAA,eAAW,0BAAX;AAAA;AAAA,eACS,wBADT;AAAA;AAAA,eAEQ,YAFR;AAAA,QDgmBT;AAnlB+LA,MAAAA,EClB7L,eDqmBF;AAnlB+LA,MAAAA,ECP7L,uFD0lBF;AAnlB+LA,MAAAA,ECH7L,6EDslBF;AAnlB+LA,MAAAA,ECW7L,gBDwkBF;AAnlB+LA,MAAAA,ECa/L,eDskBA;AAnlB+LA,MAAAA,ECe/L,uEDokBA;AAnlB+LA,MAAAA,EAmlB/L;AAAA;;AAAA;AAnlB+LA,MAAAA,EC/BzL,aDknBN;AAnlB+LA,MAAAA,EC/BzL,uBD+ByLA,EC/BzL,qFDknBN;AAnlB+LA,MAAAA,EC7B9K,aDgnBjB;AAnlB+LA,MAAAA,EC7B9K,sDDgnBjB;AAnlB+LA,MAAAA,EChBtL,aDmmBT;AAnlB+LA,MAAAA,EChBtL,mGDmmBT;AAnlB+LA,MAAAA,ECTtL,yCD4lBT;AAnlB+LA,MAAAA,ECP/K,aD0lBhB;AAnlB+LA,MAAAA,ECP/K,kCD0lBhB;AAnlB+LA,MAAAA,ECFpL,aDqlBX;AAnlB+LA,MAAAA,ECFpL,8EDqlBX;AAnlB+LA,MAAAA,ECezL,aDokBN;AAnlB+LA,MAAAA,ECezL,oBDfyLA,ECezL,8CDokBN;AAAA;AAAA;AAAA,eAMorMiD,EAAE,CAACoM,OANvrM,EAM+vMpM,EAAE,CAACqM,IANlwM,EAM65MtO,EAAE,CAACuO,oBANh6M,EAM0pNvO,EAAE,CAACwO,eAN7pN,EAM+uNxO,EAAE,CAACyO,oBANlvN,EAMg1MtM,EAAE,CAACuM,UANn1M;AAAA,UAM05NzM,EAAE,CAAC0M,SAN75N;AAAA;AAAA;AAAA;AAOA3P,EAAE,CAACgE,wBAAH,CAA4B;AAAER,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAEe,wBAAhE;AAA0FT,EAAAA,UAAU,EAAE,CAAC;AACvHN,IAAAA,IAAI,EAAErD,SADiH;AAEvH4D,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,uBAAZ;AAAqCyL,MAAAA,SAAS,EAAE,CAC3C;AACIV,QAAAA,OAAO,EAAEhO,iBADb;AAEIiO,QAAAA,WAAW,EAAE/O,UAAU,CAAC,MAAMsE,wBAAP,CAF3B;AAGI0K,QAAAA,KAAK,EAAE;AAHX,OAD2C,CAAhD;AAMIS,MAAAA,eAAe,EAAEtP,uBAAuB,CAACuP,MAN7C;AAMqDC,MAAAA,QAAQ,EAAE,gwFAN/D;AAMi0FC,MAAAA,MAAM,EAAE,CAAC,s8DAAD;AANz0F,KAAD;AAFiH,GAAD,CAAtG;AAShBC,EAAAA,cAAc,EAAE,YAAY;AAChC,WAAO,CAAC;AAAEtM,MAAAA,IAAI,EAAElC,GAAG,CAACC,SAAZ;AAAuBuC,MAAAA,UAAU,EAAE,CAAC;AAC5BN,QAAAA,IAAI,EAAEnD,MADsB;AAE5B0D,QAAAA,IAAI,EAAE,CAACxC,SAAD;AAFsB,OAAD;AAAnC,KAAD,EAGW;AAAEiC,MAAAA,IAAI,EAAE3D,EAAE,CAAC6O;AAAX,KAHX,EAG2C;AAAElL,MAAAA,IAAI,EAAEpB,EAAE,CAACuM;AAAX,KAH3C,EAGuE;AAAEnL,MAAAA,IAAI,EAAEvC,GAAG,CAACE,SAAZ;AAAuB2C,MAAAA,UAAU,EAAE,CAAC;AAClGN,QAAAA,IAAI,EAAElD;AAD4F,OAAD,EAElG;AACCkD,QAAAA,IAAI,EAAEnD,MADP;AAEC0D,QAAAA,IAAI,EAAE,CAAC5C,SAAD;AAFP,OAFkG;AAAnC,KAHvE,EAQW;AAAEqC,MAAAA,IAAI,EAAEnB,EAAE,CAACwM;AAAX,KARX,EAQuC;AAAErL,MAAAA,IAAI,EAAEpC,GAAG,CAACC,YAAZ;AAA0ByC,MAAAA,UAAU,EAAE,CAAC;AACrEN,QAAAA,IAAI,EAAElD;AAD+D,OAAD,EAErE;AACCkD,QAAAA,IAAI,EAAEnD,MADP;AAEC0D,QAAAA,IAAI,EAAE,CAAC1C,YAAD;AAFP,OAFqE;AAAtC,KARvC,EAaW;AAAEmC,MAAAA,IAAI,EAAEqI,SAAR;AAAmB/H,MAAAA,UAAU,EAAE,CAAC;AAClCN,QAAAA,IAAI,EAAElD;AAD4B,OAAD,EAElC;AACCkD,QAAAA,IAAI,EAAEnD,MADP;AAEC0D,QAAAA,IAAI,EAAE,CAACG,gCAAD;AAFP,OAFkC;AAA/B,KAbX,CAAP;AAmBH,GA7BuB;AA6BrB6L,EAAAA,cAAc,EAAE;AAAE/K,IAAAA,gBAAgB,EAAE,CAAC;AAC5BxB,MAAAA,IAAI,EAAEjD;AADsB,KAAD,CAApB;AAEPiD,IAAAA,IAAI,EAAE,CAAC;AACPA,MAAAA,IAAI,EAAEjD;AADC,KAAD,CAFC;AAIP0E,IAAAA,SAAS,EAAE,CAAC;AACZzB,MAAAA,IAAI,EAAEjD;AADM,KAAD,CAJJ;AAMPyP,IAAAA,YAAY,EAAE,CAAC;AACfxM,MAAAA,IAAI,EAAEjD;AADS,KAAD,CANP;AAQP2E,IAAAA,mBAAmB,EAAE,CAAC;AACtB1B,MAAAA,IAAI,EAAEjD;AADgB,KAAD,CARd;AAUP4E,IAAAA,8BAA8B,EAAE,CAAC;AACjC3B,MAAAA,IAAI,EAAEjD;AAD2B,KAAD,CAVzB;AAYP6E,IAAAA,gBAAgB,EAAE,CAAC;AACnB5B,MAAAA,IAAI,EAAEjD;AADa,KAAD,CAZX;AAcP8E,IAAAA,SAAS,EAAE,CAAC;AACZ7B,MAAAA,IAAI,EAAEjD;AADM,KAAD,CAdJ;AAgBP+E,IAAAA,mBAAmB,EAAE,CAAC;AACtB9B,MAAAA,IAAI,EAAEjD;AADgB,KAAD,CAhBd;AAkBPgF,IAAAA,0BAA0B,EAAE,CAAC;AAC7B/B,MAAAA,IAAI,EAAEjD;AADuB,KAAD,CAlBrB;AAoBPiF,IAAAA,4BAA4B,EAAE,CAAC;AAC/BhC,MAAAA,IAAI,EAAEjD;AADyB,KAAD,CApBvB;AAsBPkF,IAAAA,qCAAqC,EAAE,CAAC;AACxCjC,MAAAA,IAAI,EAAEjD;AADkC,KAAD,CAtBhC;AAwBPmF,IAAAA,SAAS,EAAE,CAAC;AACZlC,MAAAA,IAAI,EAAEjD;AADM,KAAD,CAxBJ;AA0BPoF,IAAAA,qBAAqB,EAAE,CAAC;AACxBnC,MAAAA,IAAI,EAAEjD;AADkB,KAAD,CA1BhB;AA4BPqF,IAAAA,wBAAwB,EAAE,CAAC;AAC3BpC,MAAAA,IAAI,EAAEjD;AADqB,KAAD,CA5BnB;AA8BPsF,IAAAA,8BAA8B,EAAE,CAAC;AACjCrC,MAAAA,IAAI,EAAEjD;AAD2B,KAAD,CA9BzB;AAgCPuF,IAAAA,+BAA+B,EAAE,CAAC;AAClCtC,MAAAA,IAAI,EAAEjD;AAD4B,KAAD,CAhC1B;AAkCPwF,IAAAA,gCAAgC,EAAE,CAAC;AACnCvC,MAAAA,IAAI,EAAEjD;AAD6B,KAAD,CAlC3B;AAoCPyF,IAAAA,qBAAqB,EAAE,CAAC;AACxBxC,MAAAA,IAAI,EAAEjD;AADkB,KAAD,CApChB;AAsCP0F,IAAAA,iCAAiC,EAAE,CAAC;AACpCzC,MAAAA,IAAI,EAAEjD;AAD8B,KAAD,CAtC5B;AAwCP2F,IAAAA,SAAS,EAAE,CAAC;AACZ1C,MAAAA,IAAI,EAAEhD;AADM,KAAD,CAxCJ;AA0CPuL,IAAAA,iBAAiB,EAAE,CAAC;AACpBvI,MAAAA,IAAI,EAAE/C,SADc;AAEpBsD,MAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB;AAAEkM,QAAAA,IAAI,EAAE/P,UAAR;AAAoBgQ,QAAAA,MAAM,EAAE;AAA5B,OAAtB;AAFc,KAAD,CA1CZ;AA6CP1C,IAAAA,iBAAiB,EAAE,CAAC;AACpBhK,MAAAA,IAAI,EAAE/C,SADc;AAEpBsD,MAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB;AAAEkM,QAAAA,IAAI,EAAE/P,UAAR;AAAoBgQ,QAAAA,MAAM,EAAE;AAA5B,OAAtB;AAFc,KAAD,CA7CZ;AAgDPC,IAAAA,SAAS,EAAE,CAAC;AACZ3M,MAAAA,IAAI,EAAE9C,YADM;AAEZqD,MAAAA,IAAI,EAAE,CAACb,6BAAD;AAFM,KAAD,CAhDJ;AAmDPkN,IAAAA,cAAc,EAAE,CAAC;AACjB5M,MAAAA,IAAI,EAAE9C,YADW;AAEjBqD,MAAAA,IAAI,EAAE,CAACM,gCAAD;AAFW,KAAD,CAnDT;AAsDPiD,IAAAA,iBAAiB,EAAE,CAAC;AACpB9D,MAAAA,IAAI,EAAE7C,WADc;AAEpBoD,MAAAA,IAAI,EAAE,CAAC,2CAAD;AAFc,KAAD;AAtDZ;AA7BK,CAA5B;AAwFA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMsM,sBAAsB,GAAG,OAA/B;;AACA,MAAMC,wBAAN,CAA+B;;AAE/BA,wBAAwB,CAACnN,IAAzB,GAAgCtD,EAAE,CAACuD,kBAAH,CAAsB;AAAEC,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAE8M,wBAAhE;AAA0F7M,EAAAA,IAAI,EAAE,EAAhG;AAAoGC,EAAAA,MAAM,EAAE7D,EAAE,CAAC8D,eAAH,CAAmB/C;AAA/H,CAAtB,CAAhC;AACA0P,wBAAwB,CAACC,IAAzB,GAAgC1Q,EAAE,CAAC2Q,mBAAH,CAAuB;AAAEnN,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAE8M,wBAAhE;AAA0FG,EAAAA,YAAY,EAAE,CAAClM,wBAAD,EACvJrB,6BADuJ,EAEvJmB,gCAFuJ,CAAxG;AAEZqM,EAAAA,OAAO,EAAE,CAAC3N,YAAD,EAC5C/B,mBAD4C,EAE5C2B,eAF4C,EAG5CJ,iBAH4C,EAI5CM,aAJ4C,EAK5CJ,wBAL4C,EAM5CQ,gBAN4C,CAFG;AAQ5B0N,EAAAA,OAAO,EAAE,CAACpM,wBAAD,EAC5BrB,6BAD4B,EAE5BmB,gCAF4B;AARmB,CAAvB,CAAhC;AAWAiM,wBAAwB,CAACM,IAAzB,GAAgC/Q,EAAE,CAACgR,mBAAH,CAAuB;AAAExN,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAE8M,wBAAhE;AAA0FI,EAAAA,OAAO,EAAE,CAAC,CAC/I3N,YAD+I,EAE/I/B,mBAF+I,EAG/I2B,eAH+I,EAI/IJ,iBAJ+I,EAK/IM,aAL+I,EAM/IJ,wBAN+I,EAO/IQ,gBAP+I,CAAD;AAAnG,CAAvB,CAAhC;AASApD,EAAE,CAACgE,wBAAH,CAA4B;AAAER,EAAAA,UAAU,EAAE,QAAd;AAAwBC,EAAAA,OAAO,EAAE,SAAjC;AAA4CC,EAAAA,QAAQ,EAAE1D,EAAtD;AAA0D2D,EAAAA,IAAI,EAAE8M,wBAAhE;AAA0FxM,EAAAA,UAAU,EAAE,CAAC;AACvHN,IAAAA,IAAI,EAAE5C,QADiH;AAEvHmD,IAAAA,IAAI,EAAE,CAAC;AACC2M,MAAAA,OAAO,EAAE,CACL3N,YADK,EAEL/B,mBAFK,EAGL2B,eAHK,EAILJ,iBAJK,EAKLM,aALK,EAMLJ,wBANK,EAOLQ,gBAPK,CADV;AAUCwN,MAAAA,YAAY,EAAE,CACVlM,wBADU,EAEVrB,6BAFU,EAGVmB,gCAHU,CAVf;AAeCsM,MAAAA,OAAO,EAAE,CACLpM,wBADK,EAELrB,6BAFK,EAGLmB,gCAHK;AAfV,KAAD;AAFiH,GAAD;AAAtG,CAA5B;AAyBA;AACA;AACA;;AAEA,SAASD,8BAAT,EAAyCF,gCAAzC,EAA2EG,gCAA3E,EAA6GnB,6BAA7G,EAA4IqB,wBAA5I,EAAsK8L,sBAAtK,EAA8LC,wBAA9L,EAAwNrM,0BAAxN,EAAoPE,yBAApP,G,CACA","sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'indexAndLengthScreenReaderText',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                const activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((selectedValues) => {\n            let restoreSelectedValues = false;\n            const updatedSelectedValues = selectedValues && Array.isArray(selectedValues)\n                ? [...selectedValues]\n                : [];\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!updatedSelectedValues.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            updatedSelectedValues.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = updatedSelectedValues;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(updatedSelectedValues);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: i2.LiveAnnouncer }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, host: { properties: { \"class.mat-select-search-inside-mat-option\": \"this.isInsideMatOption\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"], components: [{ type: i3.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }, { type: i4.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"diameter\", \"strokeWidth\", \"mode\", \"value\"], exportAs: [\"matProgressSpinner\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i8.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { type: i9.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i9.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i9.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i10.MatSelect, decorators: [{\n                        type: Inject,\n                        args: [MatSelect]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i11.MatOption, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatOption]\n                    }] }, { type: i2.LiveAnnouncer }, { type: i12.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatFormField]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], indexAndLengthScreenReaderText: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toogleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }], isInsideMatOption: [{\n                type: HostBinding,\n                args: ['class.mat-select-search-inside-mat-option']\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '4.2.0';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };\n//# sourceMappingURL=ngx-mat-select-search.mjs.map\n",null]},"metadata":{},"sourceType":"module"}